[gd_scene load_steps=23 format=2]

[ext_resource path="res://scenes/GameCamera.tscn" type="PackedScene" id=1]
[ext_resource path="res://scenes/Player.tscn" type="PackedScene" id=2]
[ext_resource path="res://resources/tileset.tres" type="TileSet" id=3]
[ext_resource path="res://scenes/Flag.tscn" type="PackedScene" id=4]
[ext_resource path="res://scenes/UI/LevelUI.tscn" type="PackedScene" id=5]
[ext_resource path="res://scenes/UI/LevelComplete.tscn" type="PackedScene" id=6]
[ext_resource path="res://scenes/BaseLevel.gd" type="Script" id=7]
[ext_resource path="res://resources/tileset_decorative.tres" type="TileSet" id=8]
[ext_resource path="res://scenes/OutOfBounds.tscn" type="PackedScene" id=10]
[ext_resource path="res://assets/background/parallax/clouds.png" type="Texture" id=12]
[ext_resource path="res://assets/background/parallax/islands.png" type="Texture" id=13]
[ext_resource path="res://scenes/ParallaxBackground.gd" type="Script" id=14]

[sub_resource type="Shader" id=15]
code = "shader_type canvas_item;

uniform int levels = 3;
uniform float spread = 0.01;

vec3 chromatic_slice(float t){
	vec3 res = vec3(1.0-t, 1.0 - abs(t - 1.0), t - 1.0);
	return max(res, 0.0);
}

void fragment(){
	vec3 sum;
	COLOR.rgb = vec3(0);
	vec2 offset = (UV - vec2(0.5))*vec2(1,-1);
	for(int i = 0; i < levels; i++){
		float t = 2.0*float(i)/float(levels-1); // range 0.0->2.0
		vec3 slice = vec3(1.0-t, 1.0 - abs(t - 1.0), t - 1.0);
		slice = max(slice, 0.0);
		sum += slice;
		vec2 slice_offset = (t-1.0)*spread*offset;
		COLOR.rgb += slice * texture(SCREEN_TEXTURE, SCREEN_UV + slice_offset).rgb;
	}
	COLOR.rgb /= sum;
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 15 )
shader_param/levels = 4
shader_param/spread = 0.0

[sub_resource type="Animation" id=7]
resource_name = "Pulse"
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("CAShader:material:shader_param/spread")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( -2, -2 ),
"update": 0,
"values": [ 0.01, 0.08 ]
}

[sub_resource type="Animation" id=8]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("CAShader:material:shader_param/spread")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}

[sub_resource type="Animation" id=9]
resource_name = "Twitch_1"
length = 0.3
tracks/0/type = "value"
tracks/0/path = NodePath("CAShader:material:shader_param/spread")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.3 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 0.0, 0.04, 0.0 ]
}

[sub_resource type="Animation" id=10]
resource_name = "Twitch_2"
length = 0.3
tracks/0/type = "value"
tracks/0/path = NodePath("CAShader:material:shader_param/spread")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.3 ),
"transitions": PoolRealArray( -2, -2, -2 ),
"update": 0,
"values": [ 0.0, 0.08, 0.0 ]
}

[sub_resource type="Shader" id=16]
code = "shader_type canvas_item;
uniform vec2 player_position;
uniform vec4 color : hint_color = vec4(0.305, 0.298, 0.341,1);

uniform float MULTIPLIER = 0.56;
uniform float SCALE = 0.5;
uniform float SOFTNESS = 0.45;

void fragment(){
	float val = distance(vec2(UV.x , UV.y * MULTIPLIER), vec2(player_position.x , player_position.y * MULTIPLIER));
	val = val / SCALE;
	float vignette = smoothstep(0.2, SOFTNESS, val);
	COLOR = vec4(color.rgb , vignette );
}"

[sub_resource type="ShaderMaterial" id=17]
shader = SubResource( 16 )
shader_param/player_position = Vector2( 0.5, 0.5 )
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/MULTIPLIER = 0.7
shader_param/SCALE = 2.0
shader_param/SOFTNESS = 0.7

[sub_resource type="Animation" id=18]
resource_name = "Fade"
length = 1.8
tracks/0/type = "value"
tracks/0/path = NodePath("VShader:rect_position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray(  ),
"transitions": PoolRealArray(  ),
"update": 0,
"values": [  ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("VShader:material:shader_param/SCALE")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0.3, 1.2, 1.8 ),
"transitions": PoolRealArray( 0.5, 1, 2 ),
"update": 0,
"values": [ 2.0, 0.6, 2.0 ]
}

[sub_resource type="Animation" id=19]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("VShader:material:shader_param/SCALE")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 2.0 ]
}

[node name="BaseLevel" type="Node" groups=["base_level"]]
script = ExtResource( 7 )
levelCompleteScene = ExtResource( 6 )

[node name="LevelUI" parent="." instance=ExtResource( 5 )]

[node name="GameCamera" parent="." instance=ExtResource( 1 )]
backgroundColor = Color( 0.964706, 0.87451, 0.890196, 1 )

[node name="ParallaxBackground" type="ParallaxBackground" parent="GameCamera"]
script = ExtResource( 14 )

[node name="ParallaxIslands" type="ParallaxLayer" parent="GameCamera/ParallaxBackground"]
motion_scale = Vector2( 0.15, 0.15 )
motion_mirroring = Vector2( 840, 472 )

[node name="Sprite" type="Sprite" parent="GameCamera/ParallaxBackground/ParallaxIslands"]
texture = ExtResource( 13 )

[node name="ParallaxClouds" type="ParallaxLayer" parent="GameCamera/ParallaxBackground"]
motion_scale = Vector2( 0.2, 0.2 )
motion_mirroring = Vector2( 840, 472 )

[node name="Sprite" type="Sprite" parent="GameCamera/ParallaxBackground/ParallaxClouds"]
texture = ExtResource( 12 )

[node name="CameraShader" type="CanvasLayer" parent="GameCamera"]

[node name="ChromaticAbberation" type="Node" parent="GameCamera/CameraShader"]

[node name="CAShader" type="ColorRect" parent="GameCamera/CameraShader/ChromaticAbberation"]
material = SubResource( 6 )
anchor_right = 1.0
anchor_bottom = 1.0

[node name="AnimationPlayer" type="AnimationPlayer" parent="GameCamera/CameraShader/ChromaticAbberation"]
autoplay = "RESET"
anims/Pulse = SubResource( 7 )
anims/RESET = SubResource( 8 )
anims/Twitch_1 = SubResource( 9 )
anims/Twitch_2 = SubResource( 10 )

[node name="Vignette" type="Node" parent="GameCamera/CameraShader"]

[node name="VShader" type="ColorRect" parent="GameCamera/CameraShader/Vignette"]
self_modulate = Color( 1, 1, 1, 0.901961 )
material = SubResource( 17 )
anchor_right = 1.0
anchor_bottom = 1.0

[node name="AnimationPlayer" type="AnimationPlayer" parent="GameCamera/CameraShader/Vignette"]
autoplay = "RESET"
anims/Fade = SubResource( 18 )
anims/RESET = SubResource( 19 )

[node name="DecorativeTileMapFront" type="TileMap" parent="."]
z_index = 1337
tile_set = ExtResource( 8 )
cell_size = Vector2( 18, 18 )
format = 1

[node name="InvisibleTileMap" type="TileMap" parent="."]
visible = false
tile_set = ExtResource( 3 )
cell_size = Vector2( 18, 18 )
format = 1

[node name="TileMap" type="TileMap" parent="."]
tile_set = ExtResource( 3 )
cell_size = Vector2( 18, 18 )
format = 1

[node name="DecorativeTileMapMid" type="TileMap" parent="."]
tile_set = ExtResource( 8 )
cell_size = Vector2( 18, 18 )
format = 1

[node name="Flag" parent="." instance=ExtResource( 4 )]

[node name="Enemies" type="Node2D" parent="."]

[node name="Collectibles" type="Node2D" parent="."]

[node name="StageInteractions" type="Node2D" parent="."]

[node name="StageDecorations" type="Node2D" parent="."]

[node name="Hazards" type="Node2D" parent="."]

[node name="PlayerRoot" type="Node2D" parent="."]

[node name="Player" parent="PlayerRoot" instance=ExtResource( 2 )]

[node name="OutOfBounds" parent="." instance=ExtResource( 10 )]
position = Vector2( 0, 621 )

[node name="DecorativeTileMapBack" type="TileMap" parent="."]
z_index = -20
tile_set = ExtResource( 8 )
cell_size = Vector2( 18, 18 )
format = 1
